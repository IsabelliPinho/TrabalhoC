#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_CONTAS 100

int numeroConta[MAX_CONTAS];
char titular[MAX_CONTAS][50];
char cpf[MAX_CONTAS][12];     //cpf é char pq se não ele não pega os 0
float saldo[MAX_CONTAS];
int totalContas = 0;

//  pra validar CPF
int validarCPF(const char *cpf) {
    return strlen(cpf) == 11 && strspn(cpf, "0123456789") == 11;
}

//  pra gerar saldo aleatório
float gerarSaldoAleatorio() {
    return (float)(rand() % 1000000) / 100;  // Gera saldo aleatório na criação da conta
}

//!--------------------------------------------------------------------------

void criarConta() {
    if (totalContas >= MAX_CONTAS) {
        printf("\nLimite de contas criadas alcançado!\n");
        return;
    }
    numeroConta[totalContas] = totalContas + 1;

    printf("\n- Criar Conta -\n");
    for (int i = 0; i < 50; i++) {
        printf("-");
    }

    printf("\nDigite o nome do titular da conta:\n");
    scanf(" %[^\n]%*c", titular[totalContas]);

    char cpfTemp[12];
    do {
        printf("\nDigite o CPF do titular da conta (11 dígitos, apenas números):\n");
        scanf(" %[^\n]%*c", cpfTemp);

        if (!validarCPF(cpfTemp)) {
            printf("CPF inválido! Deve ter exatamente 11 dígitos e conter apenas números.\n");
        }
    } while (!validarCPF(cpfTemp));

    strcpy(cpf[totalContas], cpfTemp);

    // Gerar saldo aleatório
    saldo[totalContas] = gerarSaldoAleatorio();
    totalContas++;

    printf("\nConta criada com sucesso! O número da sua conta é: %d e seu saldo atual é de: R$%.2f\n", numeroConta[totalContas - 1], saldo[totalContas - 1]);
}

//!--------------------------------------------------------------------------

void depositar() {
    int numero;
    float valor;

    printf("\n- Depositar -\n");
    for (int i = 0; i < 50; i++) {
        printf("-");
    }

    printf("\nDigite o número da conta para depósito:\n");
    scanf("%d", &numero);

    if (numero <= 0 || numero > totalContas) {
        printf("\nConta não encontrada!\n");
        return;
    }

    printf("\nDigite o valor a ser depositado: R$\n");
    scanf("%f", &valor);

    saldo[numero - 1] += valor;

    printf("\nDepósito feito com sucesso!\n");
    printf("O seu saldo atual é de: R$%.2f\n", saldo[numero - 1]);
}

//!--------------------------------------------------------------------------

void sacar() {
    int numero;
    float valor;

    printf("\n- Sacar -\n");
    for (int i = 0; i < 50; i++) {
        printf("-");
    }

    printf("\nDigite o número da conta para saque:\n");
    scanf("%d", &numero);

    if (numero <= 0 || numero > totalContas) {
        printf("\nConta não encontrada!\n");
        return;
    }

    printf("\nDigite o valor a ser sacado: R$\n");
    scanf("%f", &valor);

    if (valor > saldo[numero - 1]) {
        printf("\nSaldo insuficiente!\n");
        return;
    }

    saldo[numero - 1] -= valor;

    printf("\nSaque feito com sucesso!\n");
    printf("O seu saldo atual é de: R$%.2f\n", saldo[numero - 1]);
}

//!--------------------------------------------------------------------------

void transferir() {
    int numero, numero2;
    float valor;

    printf("\n- Transferir Valor -\n");
    for (int i = 0; i < 50; i++) {
        printf("-");
    }

    printf("\nDigite o número da conta de origem:\n");
    scanf("%d", &numero);

    if (numero <= 0 || numero > totalContas) {
        printf("\nConta não encontrada!\n");
        return;
    }

    printf("\nDigite o número da conta de destino:\n");
    scanf("%d", &numero2);

    if (numero2 <= 0 || numero2 > totalContas) {
        printf("\nConta não encontrada!\n");
        return;
    } else if (numero2 == numero) {
        printf("\nNão é possível transferir para a mesma conta!\n");
        return;
    }

    printf("\nDigite o valor a ser transferido: R$\n");
    scanf("%f", &valor);

    if (valor > saldo[numero - 1]) {
        printf("\nSaldo insuficiente!\n");
        return;
    }

    time_t tempo;
    time(&tempo);

    saldo[numero - 1] -= valor;
    saldo[numero2 - 1] += valor;

    printf("\nTransferência realizada com sucesso!\n");
    printf("Saldo restante da conta de origem: R$%.2f\n", saldo[numero - 1]);
    printf("Data/Hora da Transferência: %s\n", ctime(&tempo));
}

//!--------------------------------------------------------------------------

void VisuConta() {
    int numero;

    printf("\n- Visualizar Conta -\n");
    for (int i = 0; i < 50; i++) {
        printf("-");
    }

    printf("\nDigite o número da conta a ser visualizada:\n");
    scanf("%d", &numero);

    if (numero <= 0 || numero > totalContas) {
        printf("Conta não encontrada!\n");
        return;
    }

    printf("\nNúmero da conta: %d\n", numeroConta[numero - 1]);
    printf("Titular da conta: %s\n", titular[numero - 1]);
    printf("CPF do titular: %s\n", cpf[numero - 1]);
    printf("Saldo da conta: R$%.2f\n", saldo[numero - 1]);
}

//!--------------------------------------------------------------------------

void AtualizarDados() {
  
}
//!--------------------------------------------------------------------------

void fecharConta() {
    
}

//!--------------------------------------------------------------------------

void exibirMenu() {
    printf("\n--- Simulador de Gerenciamento de Contas Bancárias ---\n");
    printf("\n1. Criar nova conta\n");
    printf("2. Depositar\n");
    printf("3. Sacar\n");
    printf("4. Transferir\n");
    printf("5. Visualizar Conta\n");
    printf("6. Atualizar dados do titular (nome ou CPF)\n");
    printf("7. Fechar conta bancária\n");
    printf("8. Sair\n");
    printf("\nEscolha uma opção: ");
}

//!--------------------------------------------------------------------------

int main() {
    int opcao;

    
    srand(time(NULL)); // pro saldo aleatorio

    do {
        exibirMenu();

        if (scanf("%d", &opcao) != 1) {
            printf("\nEntrada invalida! Tente novamente.\n");
            while (getchar() != '\n');
            continue;
        }

        switch (opcao) {
            case 1:
                criarConta();
                break;
            case 2:
                depositar();
                break;
            case 3:
                sacar();
                break;
            case 4:
                transferir();
                break;
            case 5:
                VisuConta();
                break;
            case 6:
                AtualizarDados();
                break;
            case 7:
                fecharConta();
                break;
            case 8:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida! Tente novamente.\n");
        }

    } while (opcao != 8);

    return 0;
}
