#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_CONTAS 100
#define ARQUIVO_CONTAS "contas_bancarias.txt"

struct ContaBancaria{
int numeroConta;
char titular[50];
char cpf[12]; // cpf é char pq se não ele não pega os 0
float saldo;
int ativa;
};

struct ContaBancaria contas[MAX_CONTAS];

int totalContas = 0;

//  pra validar CPF
int validarCPF(const char *cpf)
{
    return strlen(cpf) == 11 && strspn(cpf, "0123456789") == 11;
}

//!--------------------------------------------------------------------------

void criarConta()
{
    if (totalContas >= MAX_CONTAS)
    {
        printf("\nLimite de contas criadas alcançado!\n");
        return;
    }

    struct ContaBancaria *novaConta = &contas[totalContas];
    novaConta -> numeroConta = totalContas + 1;
    novaConta -> saldo = 0.0;
    novaConta -> ativa = 1;

    printf("\n- Criar Conta -\n");
    for (int i = 0; i < 50; i++)
    {
        printf("-");
    }

    printf("\nDigite o nome do titular da conta:\n");
    scanf(" %[^\n]%*c", novaConta -> titular);

    char cpfTemp[12];
    do
    {
        printf("\nDigite o CPF do titular da conta (11 dígitos, apenas números):\n");
        scanf(" %[^\n]%*c", cpfTemp);

        if (!validarCPF(cpfTemp))
        {
            printf("CPF inválido! Deve ter exatamente 11 dígitos e conter apenas números.\n");
        }
    } while (!validarCPF(cpfTemp));

    strcpy(novaConta->cpf, cpfTemp);

    totalContas++;

    printf("\nConta criada com sucesso! O número da sua conta é: %d e seu saldo atual é de: R$%.2f\n", novaConta->numeroConta, novaConta->saldo);
}

//!--------------------------------------------------------------------------

void depositar()
{
    int numero;
    float valor;

    printf("\n- Depositar -\n");
    for (int i = 0; i < 50; i++)
    {
        printf("-");
    }

    printf("\nDigite o número da conta para depósito:\n");
    scanf("%d", &numero);

    if (numero <= 0 || numero > totalContas || contas[numero - 1].ativa == -1)
    {
        printf("\nConta não encontrada ou foi fechada e não está disponível para operações!\n");
        return;
    }

    printf("\nDigite o valor a ser depositado: R$\n");
    scanf("%f", &valor);

    contas[numero - 1].saldo += valor;

    printf("\nDepósito feito com sucesso!\n");
    printf("O seu saldo atual é de: R$%.2f\n", contas[numero -1].saldo);
}

//!--------------------------------------------------------------------------

void sacar()
{
    int numero;
    float valor;

    printf("\n- Sacar -\n");
    for (int i = 0; i < 50; i++)
    {
        printf("-");
    }

    printf("\nDigite o número da conta para saque:\n");
    scanf("%d", &numero);

    if (numero <= 0 || numero > totalContas || contas[numero - 1].ativa == -1)
    {
        printf("\nConta não encontrada ou foi fechada e não está disponível para operações!\n");
        return;
    }


    printf("\nDigite o valor a ser sacado: R$\n");
    scanf("%f", &valor);

    if (valor > contas[numero - 1].saldo)
    {
        printf("\nSaldo insuficiente!\n");
        return;
    }

    contas[numero - 1].saldo -= valor;

    printf("\nSaque feito com sucesso!\n");
    printf("O seu saldo atual é de: R$%.2f\n", contas[numero - 1].saldo);
}

//!--------------------------------------------------------------------------

void transferir()
{
    int numero, numero2;
    float valor;

    printf("\n- Transferir Valor -\n");
    for (int i = 0; i < 50; i++)
    {
        printf("-");
    }

    printf("\nDigite o número da conta de origem:\n");
    scanf("%d", &numero);

    if (numero <= 0 || numero > totalContas || contas[numero - 1].ativa == -1)
    {
        printf("\nConta não encontrada ou foi fechada e não está disponível para operações!\n");
        return;
    }

    printf("\nDigite o número da conta de destino:\n");
    scanf("%d", &numero2);

    if (numero2 <= 0 || numero2 > totalContas || numero2 == numero || contas[numero2 - 1].ativa == -1)
    {
        printf("\nConta não encontrada ou inválida!\n");
        return;
    }
   
    printf("\nDigite o valor a ser transferido: R$\n");
    scanf("%f", &valor);

    if (valor > contas[numero - 1].saldo)
    {
        printf("\nSaldo insuficiente!\n");
        return;
    }

    contas[numero - 1].saldo -= valor;
    contas[numero2 - 1].saldo += valor;

     time_t tempo;
    time(&tempo);

    printf("\nTransferência realizada com sucesso!\n");
    printf("Saldo restante da conta de origem: R$%.2f\n",  contas[numero - 1].saldo);
    printf("Data/Hora da Transferência: %s\n", ctime(&tempo));
}

//!--------------------------------------------------------------------------

void VisuConta()
{
    int numero;

    printf("\n- Visualizar Conta -\n");
    for (int i = 0; i < 50; i++)
    {
        printf("-");
    }

    printf("\nDigite o número da conta a ser visualizada:\n");
    scanf("%d", &numero);

    if (numero <= 0 || numero > totalContas || contas[numero - 1].ativa == -1) {
        printf("\nConta não encontrada ou está fechada!\n");
        return;
    }

    printf("\nNúmero da conta: %d\n", contas[numero - 1].numeroConta);
    printf("Titular da conta: %s\n", contas[numero - 1].titular);
    printf("CPF do titular: %s\n", contas[numero - 1].cpf);
    printf("Saldo da conta: R$%.2f\n", contas[numero - 1].saldo);
}

//!--------------------------------------------------------------------------

void AtualizarDados() {
    int numero;
    int opcao;
    char novoTitular[50];
    char novoCpf[12];

    void atuTitular(){
        printf("\nDigite o novo nome do titular:\n");
        scanf(" %[^\n]%*c", novoTitular);
        strcpy(contas[numero - 1].titular, novoTitular); // Atualiza o nome do titular
        printf("\nNome atualizado com sucesso! O novo nome do titular é: %s\n", novoTitular);
    }

    void atuCPF(){
       do {
                printf("Digite o novo CPF do titular (11 dígitos, apenas números):\n");
                scanf(" %[^\n]%*c", novoCpf);

                // Valida o CPF inserido
                if (!validarCPF(novoCpf)) {
                    printf("CPF inválido! Deve ter exatamente 11 dígitos e conter apenas números.\n");
                }
            } while (!validarCPF(novoCpf));

            // Atualiza o CPF na conta
            strcpy(contas[numero - 1].cpf, novoCpf);
            printf("CPF do titular atualizado com sucesso!\n");
    }

    printf("\n- Atualizar Dados do Titular -\n");
    for (int i = 0; i < 50; i++) {
        printf("-");
    }

    printf("\nDigite o número da conta que deseja atualizar:\n");
    scanf("%d", &numero);

 if (numero <= 0 || numero > totalContas || contas[numero - 1].ativa == -1) {
        printf("\nConta não encontrada ou está fechada!\n");
        return;
    }

    printf("\nO que você deseja atualizar?\n");
    printf("1. Nome do titular\n");
    printf("2. CPF do titular\n");
    printf("3. Nome e CPF\n");
    printf("Escolha uma opção: ");
    scanf("%d", &opcao);

    switch (opcao) {
        case 1:
            atuTitular();
            break;
        case 2:
            atuCPF();
            break;
        case 3:
            atuTitular();
            atuCPF();
            break;
        default:
            printf("Opção inválida!\n");
    }
}
//!--------------------------------------------------------------------------

void fecharConta()
{
     int numero;

    printf("\n- Fechar Conta Bancária -\n");
    for (int i = 0; i < 50; i++) {
        printf("-");
    }

    printf("\nDigite o número da conta que deseja fechar:\n");
    scanf("%d", &numero);

     if (numero <= 0 || numero > totalContas || contas[numero - 1].ativa == -1) {
        printf("\nConta não encontrada ou já está fechada!\n");
        return;
    }

   if(contas[numero - 1].saldo == 0.0){

    // Confirma
    printf("\nTem certeza que deseja fechar a conta %d (%s)? (1 para Sim / 0 para Não): ", contas[numero - 1].numeroConta, contas[numero - 1].titular);
    int confirmar;
    scanf("%d", &confirmar);

    if (confirmar == 1) {
      contas[numero - 1].ativa = -1; // Definir como -1 para indicar que a conta está fechada, pois apagar a conta e decrementar o total faria com que o numero das outras contas fosse alterado.
        printf("\nConta fechada com sucesso!\n");
    } else {
        printf("\nOperação de fechamento cancelada.\n");
    }
   } else{
    printf("Antes de fecha-lá, saque ou transfira o saldo da conta.\n");
   }
}

//!--------------------------------------------------------------------------

void salvarContasEmArquivo() {
    FILE *arquivo = fopen(ARQUIVO_CONTAS, "w");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo para salvar as contas.\n");
        return;
    }
    
    for (int i = 0; i < totalContas; i++) {
        fprintf(arquivo, "%d %s %s %.2f %d\n", 
            contas[i].numeroConta, 
            contas[i].titular, 
            contas[i].cpf, 
            contas[i].saldo, 
            contas[i].ativa);
    }
    
    fclose(arquivo);
    printf("\nContas salvas com sucesso no arquivo.\n");
}

//!--------------------------------------------------------------------------

void carregarContasDeArquivo() {
    FILE *arquivo = fopen(ARQUIVO_CONTAS, "r");
    if (arquivo == NULL) {
        printf("Nenhum arquivo de contas encontrado. Iniciando com base vazia.\n");
        return;
    }
    
    totalContas = 0;
    while (fscanf(arquivo, "%d %49s %11s %f %d", 
                  &contas[totalContas].numeroConta, 
                  contas[totalContas].titular, 
                  contas[totalContas].cpf, 
                  &contas[totalContas].saldo, 
                  &contas[totalContas].ativa) != EOF) {
        totalContas++;
    }

    fclose(arquivo);
    printf("\nContas carregadas do arquivo com sucesso.\n");
}

//!--------------------------------------------------------------------------

void visualizarArquivoContas() {
    FILE *arquivo = fopen(ARQUIVO_CONTAS, "r");
    if (arquivo == NULL) {
        printf("Nenhum arquivo de contas encontrado.\n");
        return;
    }

    printf("\n--- Visualização do Arquivo de Contas ---\n");

    int numeroConta, ativa;
    char titular[50], cpf[12];
    float saldo;

    // Leitura e exibição das contas do arquivo
    while (fscanf(arquivo, "%d %49s %11s %f %d", 
                  &numeroConta, titular, cpf, &saldo, &ativa) != EOF) {
        printf("Número da Conta: %d\n", numeroConta);
        printf("Titular: %s\n", titular);
        printf("CPF: %s\n", cpf);
        printf("Saldo: R$%.2f\n", saldo);
        printf("Ativa: %s\n", ativa == 1 ? "Sim" : "Não");
        printf("---------------------------------\n");
    }

    fclose(arquivo);
}

//!--------------------------------------------------------------------------

void excluirArquivoContas() {
    int confirmar;
    printf("\nTem certeza que deseja excluir o arquivo de contas? Isso apagará permanentemente todos os dados. (1 para Sim / 0 para Não): ");
    scanf("%d", &confirmar);

    if (confirmar == 1) {
        if (remove(ARQUIVO_CONTAS) == 0) {
            printf("\nArquivo de contas excluído com sucesso. Agora você pode começar do zero.\n");
            totalContas = 0; // Reinicializando tudo
        } else {
            printf("\nErro ao excluir o arquivo de contas. Talvez o arquivo não exista.\n");
        }
    } else {
        printf("\nExclusão cancelada.\n");
    }
}

//!--------------------------------------------------------------------------

void exibirMenu()
{
    printf("\n--- Simulador de Gerenciamento de Contas Bancárias ---\n");
    printf("\n1. Criar nova conta\n");
    printf("2. Depositar\n");
     printf("3. Sacar \n");
    printf("4. Transferir\n");
    printf("5. Visualizar Conta\n");
    printf("6. Atualizar dados do titular (nome ou CPF)\n");
    printf("7. Fechar conta bancária\n");
    printf("8. Visualizar Arquivo de Contas\n");
    printf("9. Excluir Arquivo de Contas\n");
    printf("10.[Sair]\n");
    printf("\nEscolha uma opção: ");
}

//!--------------------------------------------------------------------------



int main()
{
    carregarContasDeArquivo();
    int opcao;

    do
    {
        exibirMenu();

        if (scanf("%d", &opcao) != 1)
        {
            printf("\nEntrada invalida! Tente novamente.\n");
            while (getchar() != '\n')
                ;
            continue;
        }

        switch (opcao)
        {
        case 1:
            criarConta();
            break;
        case 2:
            depositar();
            break;
        case 3:
            sacar();
            break;
        case 4:
            transferir();
            break;
        case 5:
            VisuConta();
            break;
        case 6:
            AtualizarDados();
            break;
        case 7:
            fecharConta();
            break;
        case 8:
            visualizarArquivoContas();
            break;
        case 9:
            excluirArquivoContas();
            break;
        case 10: 
            int escolha;
            
            printf("Você deseja salvar as contras criadas em um arquivo para a sua próxima utilização? Caso tenha excluido algum arquivo também é necessário salvar. (1 para Sim / 0 para Não)");
            scanf("%d", &escolha);
            
            if(escolha == 1){
                
            salvarContasEmArquivo();
            printf("Salvo com sucesso, saindo do programa...\n");
            
            } else{
                 printf("Saindo do programa sem salvar...\n");
            }
            
            break;
        default:
            printf("Opção inválida! Tente novamente.\n");
        }

    } while (opcao != 10);

    return 0;
}                                                          
